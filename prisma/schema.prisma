// Scout v2 Database Schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Teams table
model Team {
  id           String   @id @default(cuid())
  name         String   @unique // URL slug: 'masen', 'move', etc.
  displayName  String   // Human-readable name
  passwordHash String   // Hashed team password
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  maps             Map[]
  sessions         TeamSession[]
  markerCategories MarkerCategory[]

  @@map("teams")
}

// Team sessions for authentication
model TeamSession {
  id              String   @id @default(cuid())
  teamId          String
  sessionToken    String   @unique
  userIdentifier  String?  // Optional user tracking
  expiresAt       DateTime
  createdAt       DateTime @default(now())

  // Relations
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_sessions")
}

// Maps table
model Map {
  id        String   @id @default(cuid())
  teamId    String
  title     String
  centerLat Float?
  centerLng Float?
  zoom      Float?
  style     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  markers   Marker[]

  @@map("maps")
}

// Markers table
model Marker {
  id            String   @id @default(cuid())
  mapId         String
  label         String
  lat           Float
  lng           Float
  type          String   // Keep for backward compatibility
  categoryId    String?  // Reference to custom marker category
  zoneNumber    Int?     // For numbered location markers (1-10)
  deviceIcon    String?  // Legacy field, kept for backward compatibility
  assetIcon     String?  // Legacy field, kept for backward compatibility
  locked        Boolean  @default(false)
  parentId      String?
  position      Int?     // Overall position in the map (for root markers)
  childPosition Int?     // Position within parent group (for child markers)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  map         Map             @relation(fields: [mapId], references: [id], onDelete: Cascade)
  category    MarkerCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parent      Marker?         @relation("MarkerHierarchy", fields: [parentId], references: [id])
  children    Marker[]        @relation("MarkerHierarchy")

  @@map("markers")
}

// Custom marker categories for teams
model MarkerCategory {
  id           String   @id @default(cuid())
  teamId       String
  name         String   // Category name like "Devices", "Assets", etc.
  icon         String   // Material Icons name like "memory", "build", etc.
  backgroundColor String? // Background color style: "dark", "light", "blue", etc.
  displayOrder Int      @default(0) // Order in toolbar
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  markers      Marker[] // Markers using this category

  @@unique([teamId, name]) // Prevent duplicate category names per team
  @@map("marker_categories")
}

// Action history for undo/redo
model ActionHistory {
  id              String   @id @default(cuid())
  mapId           String
  actionType      String
  payload         Json
  userIdentifier  String?  // Track who made the action
  createdAt       DateTime @default(now())

  @@map("action_history")
}
